# Prometheus Configuration for Nautilus Trading Platform
# Sprint 3: Advanced Trading Infrastructure Monitoring

global:
  scrape_interval: 15s # Scrape targets every 15 seconds
  evaluation_interval: 15s # Evaluate rules every 15 seconds
  external_labels:
    monitor: 'nautilus-trading-monitor'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets: []

# Load alerting rules once and periodically evaluate them
rule_files:
  - "alert_rules.yml"

# Scrape configuration
scrape_configs:
  
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 30s
    
  # Nautilus Backend API
  - job_name: 'nautilus-backend'
    static_configs:
      - targets: ['nautilus-backend:8000']
    scrape_interval: 5s
    metrics_path: /metrics
    
  # Nautilus WebSocket metrics
  - job_name: 'nautilus-websocket'
    static_configs:
      - targets: ['nautilus-backend:8000']
    scrape_interval: 5s
    metrics_path: /ws/metrics
    
  # Trading Engine metrics
  - job_name: 'nautilus-engine'
    static_configs:
      - targets: ['nautilus-backend:8000']
    scrape_interval: 10s
    metrics_path: /api/v1/nautilus/engine/metrics
    
  # Performance Analytics metrics
  - job_name: 'nautilus-analytics'
    static_configs:
      - targets: ['nautilus-backend:8000']
    scrape_interval: 30s
    metrics_path: /api/v1/analytics/metrics
    
  # Risk Management metrics
  - job_name: 'nautilus-risk'
    static_configs:
      - targets: ['nautilus-backend:8000']
    scrape_interval: 10s
    metrics_path: /api/v1/risk/metrics
    
  # PostgreSQL metrics (if pg_exporter is available)
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres_exporter:9187']
    scrape_interval: 30s
    scrape_timeout: 10s
    
  # Redis metrics (if redis_exporter is available)
  - job_name: 'redis'
    static_configs:
      - targets: ['redis_exporter:9121']
    scrape_interval: 30s
    
  # Node exporter for system metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 30s
    
  # cAdvisor for container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 15s
    metrics_path: /metrics
    
  # Application-specific custom metrics endpoints
  - job_name: 'nautilus-custom-metrics'
    static_configs:
      - targets: ['nautilus-backend:8000']
    scrape_interval: 15s
    metrics_path: /api/v1/monitoring/custom-metrics
    
# Recording rules for precomputed queries
recording_rules:
  - name: "nautilus_trading_rules"
    rules:
      # WebSocket connection metrics
      - record: nautilus:websocket_connections_active
        expr: sum(nautilus_websocket_active_connections)
        
      - record: nautilus:websocket_messages_per_second
        expr: rate(nautilus_websocket_messages_total[5m])
        
      # Trading performance metrics
      - record: nautilus:portfolio_pnl_total
        expr: sum(nautilus_portfolio_pnl_dollars)
        
      - record: nautilus:daily_trades_count
        expr: increase(nautilus_trades_total[1d])
        
      # Risk metrics
      - record: nautilus:portfolio_var_95
        expr: avg(nautilus_risk_var_amount{confidence_level="0.95"})
        
      - record: nautilus:risk_breaches_per_hour
        expr: rate(nautilus_risk_breaches_total[1h])
        
      # System performance
      - record: nautilus:api_request_rate
        expr: rate(nautilus_http_requests_total[5m])
        
      - record: nautilus:api_error_rate
        expr: rate(nautilus_http_requests_total{status=~"4.."}[5m]) / rate(nautilus_http_requests_total[5m])
        
      - record: nautilus:database_connection_utilization
        expr: (nautilus_db_connections_active / nautilus_db_connections_max) * 100
        
      # Engine health metrics
      - record: nautilus:engine_uptime_hours
        expr: (time() - nautilus_engine_start_time) / 3600
        
      - record: nautilus:strategy_performance_total
        expr: sum by (strategy_id) (nautilus_strategy_pnl_dollars)

# Remote write configuration (for long-term storage)
# remote_write:
#   - url: "https://prometheus-remote-write-endpoint"
#     write_relabel_configs:
#       - source_labels: [__name__]
#         regex: 'nautilus_.*'
#         action: keep

# Storage configuration
storage:
  tsdb:
    retention.time: 15d
    retention.size: 10GB
    # Optimize for high-frequency trading data
    wal-compression: true
    
# Web configuration
web:
  # Enable admin API
  enable-admin-api: true
  # Console templates and libraries
  console.templates: '/etc/prometheus/consoles'
  console.libraries: '/etc/prometheus/console_libraries'
  
# Feature flags for experimental features
feature_flags:
  - "enable-new-ui"
  - "remote-write-receiver"