---
# Redis Cluster ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  namespace: nautilus-trading
  labels:
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: nautilus-trading
data:
  redis.conf: |
    # Redis Cluster Configuration
    port 6379
    cluster-enabled yes
    cluster-config-file /data/nodes.conf
    cluster-node-timeout 5000
    cluster-announce-ip $(POD_IP)
    cluster-announce-port 6379
    cluster-announce-bus-port 16379
    
    # Persistence
    appendonly yes
    appendfsync everysec
    save 900 1
    save 300 10
    save 60 10000
    
    # Memory and Performance
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    tcp-keepalive 300
    timeout 0
    
    # Security
    protected-mode no
    bind 0.0.0.0
    
    # Logging
    loglevel notice
    logfile "/data/redis.log"
    
    # Cluster settings for high availability
    cluster-require-full-coverage no
    cluster-replica-validity-factor 0
    cluster-migration-barrier 1

---
# Redis Cluster StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: nautilus-trading
  labels:
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: nautilus-trading
    app.kubernetes.io/version: "7.2"
spec:
  serviceName: redis-cluster-headless
  replicas: 6  # 3 masters + 3 replicas for high availability
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-cluster
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-cluster
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: nautilus-trading
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - redis-cluster
              topologyKey: kubernetes.io/hostname
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        command:
        - redis-server
        args:
        - /etc/redis/redis.conf
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: REDIS_CLUSTER_ANNOUNCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: config
          mountPath: /etc/redis/
        - name: data
          mountPath: /data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: config
        configMap:
          name: redis-cluster-config
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app.kubernetes.io/name: redis-cluster
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi

---
# Redis Cluster Headless Service
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-headless
  namespace: nautilus-trading
  labels:
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: nautilus-trading
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: client
  - port: 16379
    targetPort: 16379
    name: gossip
  clusterIP: None
  selector:
    app.kubernetes.io/name: redis-cluster

---
# Redis Cluster Service (for applications)
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: nautilus-trading
  labels:
    app.kubernetes.io/name: redis-cluster
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: nautilus-trading
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: client
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis-cluster
  type: LoadBalancer
  sessionAffinity: None

---
# Redis Cluster Initialization Job
apiVersion: batch/v1
kind: Job
metadata:
  name: redis-cluster-init
  namespace: nautilus-trading
  labels:
    app.kubernetes.io/name: redis-cluster-init
    app.kubernetes.io/component: initialization
    app.kubernetes.io/part-of: nautilus-trading
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-cluster-init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: redis-cluster-init
        image: redis:7.2-alpine
        command:
        - sh
        - -c
        - |
          set -e
          echo "Waiting for Redis pods to be ready..."
          sleep 30
          
          # Get pod IPs
          REDIS_NODES=""
          for i in 0 1 2 3 4 5; do
            POD_IP=$(nslookup redis-cluster-$i.redis-cluster-headless.nautilus-trading.svc.cluster.local | grep 'Address:' | tail -1 | awk '{print $2}')
            if [ ! -z "$POD_IP" ]; then
              REDIS_NODES="$REDIS_NODES $POD_IP:6379"
            fi
          done
          
          echo "Redis nodes: $REDIS_NODES"
          
          # Create cluster (3 masters, 3 replicas)
          redis-cli --cluster create $REDIS_NODES --cluster-replicas 1 --cluster-yes
          
          # Verify cluster
          redis-cli -h redis-cluster-0.redis-cluster-headless.nautilus-trading.svc.cluster.local cluster info
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"