---
# PgBouncer ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgbouncer-config
  namespace: nautilus-trading
  labels:
    app.kubernetes.io/name: pgbouncer
    app.kubernetes.io/component: connection-pooling
    app.kubernetes.io/part-of: nautilus-trading
data:
  pgbouncer.ini: |
    [databases]
    ; Database configurations
    nautilus_primary = host=postgresql-primary.nautilus-trading.svc.cluster.local port=5432 dbname=nautilus
    nautilus_replica = host=postgresql-replica.nautilus-trading.svc.cluster.local port=5432 dbname=nautilus
    nautilus = host=postgresql-primary.nautilus-trading.svc.cluster.local port=5432 dbname=nautilus
    
    [pgbouncer]
    ; Administrative settings
    listen_addr = *
    listen_port = 5432
    unix_socket_dir = /tmp
    
    ; Authentication
    auth_type = md5
    auth_file = /etc/pgbouncer/userlist.txt
    
    ; Connection pooling settings
    pool_mode = transaction
    max_client_conn = 1000
    default_pool_size = 20
    min_pool_size = 5
    reserve_pool_size = 5
    reserve_pool_timeout = 3
    max_db_connections = 50
    max_user_connections = 50
    
    ; Timeouts
    server_round_robin = 1
    ignore_startup_parameters = extra_float_digits
    server_reset_query = DISCARD ALL
    server_check_query = select 1
    server_check_delay = 30
    
    ; Connection lifetime and idle timeout
    server_lifetime = 1200
    server_idle_timeout = 600
    
    ; Query timeouts
    query_timeout = 0
    query_wait_timeout = 120
    client_idle_timeout = 0
    client_login_timeout = 60
    autodb_idle_timeout = 3600
    
    ; Logging
    syslog = 0
    syslog_facility = daemon
    syslog_ident = pgbouncer
    log_connections = 1
    log_disconnections = 1
    log_pooler_errors = 1
    
    ; Performance
    tcp_keepalive = 1
    tcp_keepcnt = 3
    tcp_keepidle = 600
    tcp_keepintvl = 30
    
    ; Statistics
    stats_period = 60
    
    ; Admin interface
    admin_users = pgbouncer_admin
    stats_users = pgbouncer_stats
    
  userlist.txt: |
    "nautilus" "md5a1b2c3d4e5f6789012345678901234"
    "pgbouncer_admin" "md5admin123456789012345678901234"
    "pgbouncer_stats" "md5stats123456789012345678901234"
  
  entrypoint.sh: |
    #!/bin/sh
    set -e
    
    # Generate password hashes if needed
    if [ ! -f /etc/pgbouncer/userlist.txt.generated ]; then
        echo "Generating user password hashes..."
        
        # Nautilus user
        NAUTILUS_HASH=$(echo -n "nautilus123nautilus" | md5sum | awk '{print $1}')
        
        # Admin users
        ADMIN_HASH=$(echo -n "admin123pgbouncer_admin" | md5sum | awk '{print $1}')
        STATS_HASH=$(echo -n "stats123pgbouncer_stats" | md5sum | awk '{print $1}')
        
        cat > /etc/pgbouncer/userlist.txt <<EOF
    "nautilus" "md5${NAUTILUS_HASH}"
    "pgbouncer_admin" "md5${ADMIN_HASH}"
    "pgbouncer_stats" "md5${STATS_HASH}"
    EOF
        
        touch /etc/pgbouncer/userlist.txt.generated
    fi
    
    # Start pgbouncer
    exec pgbouncer /etc/pgbouncer/pgbouncer.ini

---
# PgBouncer Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: nautilus-trading
  labels:
    app.kubernetes.io/name: pgbouncer
    app.kubernetes.io/component: connection-pooling
    app.kubernetes.io/part-of: nautilus-trading
    app.kubernetes.io/version: "1.21"
spec:
  replicas: 3  # Multiple instances for high availability
  selector:
    matchLabels:
      app.kubernetes.io/name: pgbouncer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pgbouncer
        app.kubernetes.io/component: connection-pooling
        app.kubernetes.io/part-of: nautilus-trading
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - pgbouncer
              topologyKey: kubernetes.io/hostname
      containers:
      - name: pgbouncer
        image: pgbouncer/pgbouncer:1.21.0
        ports:
        - containerPort: 5432
          name: pgbouncer
        - containerPort: 6432
          name: admin
        env:
        - name: DATABASES_HOST
          value: "postgresql-primary.nautilus-trading.svc.cluster.local"
        - name: DATABASES_PORT
          value: "5432"
        - name: DATABASES_USER
          value: "nautilus"
        - name: DATABASES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-credentials
              key: postgres-password
        - name: DATABASES_DBNAME
          value: "nautilus"
        volumeMounts:
        - name: config
          mountPath: /etc/pgbouncer/pgbouncer.ini
          subPath: pgbouncer.ini
        - name: config
          mountPath: /etc/pgbouncer/entrypoint.sh
          subPath: entrypoint.sh
        - name: userlist
          mountPath: /etc/pgbouncer/userlist.txt
          subPath: userlist.txt
        command:
        - /bin/sh
        - /etc/pgbouncer/entrypoint.sh
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: config
        configMap:
          name: pgbouncer-config
          defaultMode: 0755
      - name: userlist
        configMap:
          name: pgbouncer-config
          items:
          - key: userlist.txt
            path: userlist.txt

---
# PgBouncer Service
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
  namespace: nautilus-trading
  labels:
    app.kubernetes.io/name: pgbouncer
    app.kubernetes.io/component: connection-pooling
    app.kubernetes.io/part-of: nautilus-trading
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: pgbouncer
    protocol: TCP
  selector:
    app.kubernetes.io/name: pgbouncer
  type: LoadBalancer
  sessionAffinity: None

---
# PgBouncer HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pgbouncer-hpa
  namespace: nautilus-trading
  labels:
    app.kubernetes.io/name: pgbouncer
    app.kubernetes.io/component: connection-pooling
    app.kubernetes.io/part-of: nautilus-trading
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pgbouncer
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60