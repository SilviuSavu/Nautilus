---
# Prometheus Operator Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: nautilus-monitoring
  labels:
    name: nautilus-monitoring
    app.kubernetes.io/name: nautilus-monitoring
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: nautilus-trading

---
# Prometheus Operator CRDs and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-operator
  namespace: nautilus-monitoring
  labels:
    app.kubernetes.io/name: prometheus-operator
    app.kubernetes.io/component: operator
    app.kubernetes.io/part-of: nautilus-trading

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-operator
  labels:
    app.kubernetes.io/name: prometheus-operator
    app.kubernetes.io/component: operator
    app.kubernetes.io/part-of: nautilus-trading
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "nodes/metrics", "services", "endpoints", "pods", "ingresses", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "update", "patch"]
- apiGroups: ["monitoring.coreos.com"]
  resources: ["*"]
  verbs: ["*"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-operator
  labels:
    app.kubernetes.io/name: prometheus-operator
    app.kubernetes.io/component: operator
    app.kubernetes.io/part-of: nautilus-trading
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-operator
subjects:
- kind: ServiceAccount
  name: prometheus-operator
  namespace: nautilus-monitoring

---
# Prometheus Operator Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-operator
  namespace: nautilus-monitoring
  labels:
    app.kubernetes.io/name: prometheus-operator
    app.kubernetes.io/component: operator
    app.kubernetes.io/part-of: nautilus-trading
    app.kubernetes.io/version: "0.68.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-operator
        app.kubernetes.io/component: operator
        app.kubernetes.io/part-of: nautilus-trading
    spec:
      serviceAccountName: prometheus-operator
      containers:
      - name: prometheus-operator
        image: quay.io/prometheus-operator/prometheus-operator:v0.68.0
        args:
        - --kubelet-service=kube-system/kubelet
        - --prometheus-config-reloader=quay.io/prometheus-operator/prometheus-config-reloader:v0.68.0
        - --config-reloader-cpu-request=10m
        - --config-reloader-cpu-limit=100m
        - --config-reloader-memory-request=50Mi
        - --config-reloader-memory-limit=50Mi
        - --thanos-default-base-image=quay.io/thanos/thanos:v0.32.4
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            memory: "200Mi"
            cpu: "100m"
          limits:
            memory: "400Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534

---
# Prometheus Custom Resource for Nautilus Trading
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: nautilus-prometheus
  namespace: nautilus-monitoring
  labels:
    app.kubernetes.io/name: nautilus-prometheus
    app.kubernetes.io/component: prometheus
    app.kubernetes.io/part-of: nautilus-trading
spec:
  serviceAccountName: prometheus
  serviceMonitorSelector:
    matchLabels:
      team: nautilus-trading
  ruleSelector:
    matchLabels:
      team: nautilus-trading
      prometheus: nautilus-prometheus
  
  # High availability setup
  replicas: 2
  
  # Resource allocation for heavy trading workloads
  resources:
    requests:
      memory: "2Gi"
      cpu: "1000m"
    limits:
      memory: "4Gi"
      cpu: "2000m"
  
  # Storage configuration
  storage:
    volumeClaimTemplate:
      spec:
        accessModes:
        - ReadWriteOnce
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 500Gi
  
  # Retention policy
  retention: "30d"
  retentionSize: "450GiB"
  
  # External labels for federation
  externalLabels:
    cluster: nautilus-trading
    environment: production
    region: us-east-1
  
  # Security configuration
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 2000
  
  # Prometheus configuration
  configMaps:
  - prometheus-additional-config
  
  # Remote write for long-term storage (optional)
  remoteWrite:
  - url: "https://prometheus-remote-write.nautilus.trading.com/api/v1/write"
    basicAuth:
      username:
        name: prometheus-remote-auth
        key: username
      password:
        name: prometheus-remote-auth
        key: password
  
  # Alerting configuration
  alerting:
    alertmanagers:
    - namespace: nautilus-monitoring
      name: nautilus-alertmanager
      port: web

---
# ServiceAccount for Prometheus
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: nautilus-monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: prometheus
    app.kubernetes.io/part-of: nautilus-trading

---
# ClusterRole for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: prometheus
    app.kubernetes.io/part-of: nautilus-trading
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "nodes/metrics", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: prometheus
    app.kubernetes.io/part-of: nautilus-trading
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: nautilus-monitoring

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: nautilus-monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: prometheus
    app.kubernetes.io/part-of: nautilus-trading
spec:
  ports:
  - port: 9090
    targetPort: 9090
    name: web
    protocol: TCP
  selector:
    app.kubernetes.io/name: prometheus
  type: ClusterIP

---
# ServiceMonitor for Nautilus Backend
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nautilus-backend
  namespace: nautilus-monitoring
  labels:
    app.kubernetes.io/name: nautilus-backend-monitor
    app.kubernetes.io/component: service-monitor
    app.kubernetes.io/part-of: nautilus-trading
    team: nautilus-trading
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nautilus-backend
  namespaceSelector:
    matchNames:
    - nautilus-trading
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true
    scrapeTimeout: 10s

---
# ServiceMonitor for Nautilus Engine
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nautilus-engine
  namespace: nautilus-monitoring
  labels:
    app.kubernetes.io/name: nautilus-engine-monitor
    app.kubernetes.io/component: service-monitor
    app.kubernetes.io/part-of: nautilus-trading
    team: nautilus-trading
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nautilus-engine
  namespaceSelector:
    matchNames:
    - nautilus-trading
  endpoints:
  - port: metrics
    interval: 15s  # More frequent for trading engines
    path: /metrics
    honorLabels: true
    scrapeTimeout: 5s

---
# ServiceMonitor for PostgreSQL
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgresql
  namespace: nautilus-monitoring
  labels:
    app.kubernetes.io/name: postgresql-monitor
    app.kubernetes.io/component: service-monitor
    app.kubernetes.io/part-of: nautilus-trading
    team: nautilus-trading
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql-exporter
  namespaceSelector:
    matchNames:
    - nautilus-trading
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true

---
# ServiceMonitor for Redis Cluster
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-cluster
  namespace: nautilus-monitoring
  labels:
    app.kubernetes.io/name: redis-cluster-monitor
    app.kubernetes.io/component: service-monitor
    app.kubernetes.io/part-of: nautilus-trading
    team: nautilus-trading
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-exporter
  namespaceSelector:
    matchNames:
    - nautilus-trading
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true

---
# Additional Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-additional-config
  namespace: nautilus-monitoring
  labels:
    app.kubernetes.io/name: prometheus-additional-config
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: nautilus-trading
data:
  prometheus-additional.yaml: |
    # Additional scrape configs for Nautilus Trading Platform
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - nautilus-trading
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    
    # Custom trading metrics
    - job_name: 'nautilus-custom-metrics'
      static_configs:
      - targets:
        - nautilus-backend.nautilus-trading.svc.cluster.local:9090
        - nautilus-engine.nautilus-trading.svc.cluster.local:9091
      scrape_interval: 15s
      metrics_path: /metrics
      
    # External market data metrics
    - job_name: 'market-data-external'
      static_configs:
      - targets:
        - api.tradingeconomics.com:443
      scrape_interval: 60s
      metrics_path: /api/metrics
      scheme: https
      
    # Node exporter for system metrics
    - job_name: 'node-exporter'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: node-exporter
        action: keep