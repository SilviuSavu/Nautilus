# Containerized Engines Configuration
# This file defines the containerized architecture for all 9 engines
# Each engine runs in an isolated container with dedicated resources

version: '3.8'

services:
  # =====================================
  # CORE INFRASTRUCTURE
  # =====================================
  
  redis:
    image: redis:7-alpine
    container_name: nautilus-redis-enhanced
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: nautilus-postgres-enhanced
    command: ["postgres", "-c", "shared_preload_libraries=timescaledb", "-c", "max_connections=200"]
    environment:
      - POSTGRES_DB=nautilus
      - POSTGRES_USER=nautilus
      - POSTGRES_PASSWORD=nautilus123
      - POSTGRES_HOST_AUTH_METHOD=md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema/sql:/docker-entrypoint-initdb.d
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nautilus"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =====================================
  # ENGINE 1: ANALYTICS ENGINE
  # =====================================
  
  analytics-engine:
    build:
      context: ./backend/engines/analytics
      dockerfile: Dockerfile
    image: nautilus-analytics:latest
    container_name: nautilus-analytics-1
    environment:
      - ENGINE_NAME=analytics
      - ENGINE_ID=analytics-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://nautilus:nautilus123@postgres:5432/nautilus
      - MESSAGEBUS_TOPICS=trading.executions.*,risk.breaches.*,portfolio.updates.*
      - ANALYTICS_WORKERS=4
      - PERFORMANCE_CALCULATION_INTERVAL=1
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    depends_on:
      - redis
      - postgres
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Scale analytics engine for high load
  analytics-engine-2:
    extends:
      service: analytics-engine
    container_name: nautilus-analytics-2
    environment:
      - ENGINE_ID=analytics-2

  # =====================================
  # ENGINE 2: RISK MANAGEMENT ENGINE  
  # =====================================
  
  risk-engine:
    build:
      context: ./backend/engines/risk
      dockerfile: Dockerfile
    image: nautilus-risk:latest
    container_name: nautilus-risk-1
    environment:
      - ENGINE_NAME=risk
      - ENGINE_ID=risk-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://nautilus:nautilus123@postgres:5432/nautilus
      - MESSAGEBUS_TOPICS=trading.orders.*,trading.positions.*,market.data.quotes.*
      - RISK_CHECK_INTERVAL=1
      - MAX_PORTFOLIO_EXPOSURE=1000000
      - ML_BREACH_PREDICTION=enabled
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    depends_on:
      - redis
      - postgres
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 15s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # =====================================
  # ENGINE 3: FACTOR SYNTHESIS ENGINE
  # =====================================
  
  factor-engine:
    build:
      context: ./backend/engines/factor
      dockerfile: Dockerfile
    image: nautilus-factor:latest
    container_name: nautilus-factor-1
    environment:
      - ENGINE_NAME=factor
      - ENGINE_ID=factor-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://nautilus:nautilus123@postgres:5432/nautilus
      - MESSAGEBUS_TOPICS=market.data.*,economic.data.*,fundamental.data.*
      - FACTOR_CALCULATION_WORKERS=8
      - FACTOR_BATCH_SIZE=1000
      - CORRELATION_CALCULATION_ENABLED=true
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    depends_on:
      - redis
      - postgres
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Scale factor engine for 380K+ factors
  factor-engine-2:
    extends:
      service: factor-engine
    container_name: nautilus-factor-2
    environment:
      - ENGINE_ID=factor-2

  factor-engine-3:
    extends:
      service: factor-engine
    container_name: nautilus-factor-3
    environment:
      - ENGINE_ID=factor-3

  factor-engine-4:
    extends:
      service: factor-engine
    container_name: nautilus-factor-4
    environment:
      - ENGINE_ID=factor-4

  # =====================================
  # ENGINE 4: ML INFERENCE ENGINE
  # =====================================
  
  ml-inference-engine:
    build:
      context: ./backend/engines/ml
      dockerfile: Dockerfile
    image: nautilus-ml:latest
    container_name: nautilus-ml-1
    environment:
      - ENGINE_NAME=ml_inference
      - ENGINE_ID=ml-inference-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://nautilus:nautilus123@postgres:5432/nautilus
      - MESSAGEBUS_TOPICS=ml.*,market.regime,factor.scores.*
      - ML_MODEL_PATH=/app/models
      - INFERENCE_BATCH_SIZE=100
      - MODEL_RELOAD_INTERVAL=3600
      - REGIME_DETECTION_ENABLED=true
    volumes:
      - ml_models:/app/models
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 6G
        reservations:
          cpus: '1.0'
          memory: 3G
    depends_on:
      - redis
      - postgres
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Scale ML engine for high inference load
  ml-inference-engine-2:
    extends:
      service: ml-inference-engine
    container_name: nautilus-ml-2
    environment:
      - ENGINE_ID=ml-inference-2

  # =====================================
  # ENGINE 5: FEATURE ENGINEERING ENGINE
  # =====================================
  
  feature-engineering-engine:
    build:
      context: ./backend/engines/features
      dockerfile: Dockerfile
    image: nautilus-features:latest
    container_name: nautilus-features-1
    environment:
      - ENGINE_NAME=feature_engineering
      - ENGINE_ID=features-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://nautilus:nautilus123@postgres:5432/nautilus
      - MESSAGEBUS_TOPICS=market.data.*,factors.calculated.*
      - FEATURE_WORKERS=6
      - TECHNICAL_INDICATORS_ENABLED=true
      - FEATURE_CACHE_TTL=300
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 4G
        reservations:
          cpus: '1.5'
          memory: 2G
    depends_on:
      - redis
      - postgres
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Scale feature engineering for high throughput
  feature-engineering-engine-2:
    extends:
      service: feature-engineering-engine
    container_name: nautilus-features-2
    environment:
      - ENGINE_ID=features-2

  # =====================================
  # ENGINE 6: WEBSOCKET STREAMING ENGINE
  # =====================================
  
  websocket-engine:
    build:
      context: ./backend/engines/websocket
      dockerfile: Dockerfile
    image: nautilus-websocket:latest
    container_name: nautilus-websocket-1
    environment:
      - ENGINE_NAME=websocket
      - ENGINE_ID=websocket-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MESSAGEBUS_TOPICS=trading.*,risk.alerts.*,analytics.performance.*
      - WEBSOCKET_MAX_CONNECTIONS=1000
      - WEBSOCKET_HEARTBEAT_INTERVAL=30
      - WEBSOCKET_MESSAGE_BUFFER_SIZE=10000
    ports:
      - "8080:8080"  # WebSocket port
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    depends_on:
      - redis
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Scale WebSocket for 1000+ connections
  websocket-engine-2:
    extends:
      service: websocket-engine
    container_name: nautilus-websocket-2
    environment:
      - ENGINE_ID=websocket-2
    ports:
      - "8081:8080"

  websocket-engine-3:
    extends:
      service: websocket-engine
    container_name: nautilus-websocket-3
    environment:
      - ENGINE_ID=websocket-3
    ports:
      - "8082:8080"

  # =====================================
  # ENGINE 7: STRATEGY DEPLOYMENT ENGINE
  # =====================================
  
  strategy-engine:
    build:
      context: ./backend/engines/strategy
      dockerfile: Dockerfile
    image: nautilus-strategy:latest
    container_name: nautilus-strategy-1
    environment:
      - ENGINE_NAME=strategy
      - ENGINE_ID=strategy-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://nautilus:nautilus123@postgres:5432/nautilus
      - MESSAGEBUS_TOPICS=strategy.deploy.*,strategy.test.*
      - STRATEGY_TESTING_ENABLED=true
      - AUTO_ROLLBACK_ENABLED=true
      - DEPLOYMENT_APPROVAL_REQUIRED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw  # Docker access for strategy containers
      - strategy_configs:/app/strategies
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    depends_on:
      - redis
      - postgres
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # =====================================
  # ENGINE 8: MARKET DATA ENGINE
  # =====================================
  
  marketdata-engine:
    build:
      context: ./backend/engines/marketdata
      dockerfile: Dockerfile
    image: nautilus-marketdata:latest
    container_name: nautilus-marketdata-1
    environment:
      - ENGINE_NAME=marketdata
      - ENGINE_ID=marketdata-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://nautilus:nautilus123@postgres:5432/nautilus
      - MESSAGEBUS_TOPICS=data.ingest.*,market.data.raw.*
      - DATA_SOURCES=IBKR,ALPHA_VANTAGE,FRED,EDGAR,DATAGOV,DBNOMICS,TE,YFINANCE
      - DATA_INGESTION_WORKERS=4
      - DATA_QUALITY_CHECKS=true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 1.5G
    depends_on:
      - redis
      - postgres
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Scale market data for high throughput
  marketdata-engine-2:
    extends:
      service: marketdata-engine
    container_name: nautilus-marketdata-2
    environment:
      - ENGINE_ID=marketdata-2

  # =====================================
  # ENGINE 9: PORTFOLIO OPTIMIZATION ENGINE
  # =====================================
  
  portfolio-engine:
    build:
      context: ./backend/engines/portfolio
      dockerfile: Dockerfile
    image: nautilus-portfolio:latest
    container_name: nautilus-portfolio-1
    environment:
      - ENGINE_NAME=portfolio
      - ENGINE_ID=portfolio-1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://nautilus:nautilus123@postgres:5432/nautilus
      - MESSAGEBUS_TOPICS=portfolio.optimization.*,risk.limits.*
      - OPTIMIZATION_ALGORITHM=modern_portfolio_theory
      - REBALANCING_INTERVAL=3600
      - RISK_FREE_RATE=0.02
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    depends_on:
      - redis
      - postgres
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis'); r.ping()"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # =====================================
  # API GATEWAY & LOAD BALANCER
  # =====================================
  
  nginx-gateway:
    image: nginx:alpine
    container_name: nautilus-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-engines.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - analytics-engine
      - risk-engine
      - factor-engine
      - ml-inference-engine
      - feature-engineering-engine
      - websocket-engine
      - strategy-engine
      - marketdata-engine
      - portfolio-engine
    networks:
      - nautilus-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # =====================================
  # MONITORING & OBSERVABILITY
  # =====================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: nautilus-prometheus-engines
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-engines.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nautilus-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: nautilus-grafana-engines
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards-engines:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning-engines:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - nautilus-network
    restart: unless-stopped

  # =====================================
  # MESSAGE BUS MONITORING
  # =====================================
  
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: nautilus-redis-insight
    ports:
      - "8001:8001"
    depends_on:
      - redis
    networks:
      - nautilus-network
    restart: unless-stopped

networks:
  nautilus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  ml_models:
  strategy_configs:

# =====================================
# ENGINE SCALING PROFILES  
# =====================================

# Development Profile: Minimal resources
# docker-compose -f docker-compose.engines.yml --profile dev up -d

# Production Profile: Full scaling  
# docker-compose -f docker-compose.engines.yml --profile prod up -d

# High-Frequency Profile: Maximum performance
# docker-compose -f docker-compose.engines.yml --profile hft up -d