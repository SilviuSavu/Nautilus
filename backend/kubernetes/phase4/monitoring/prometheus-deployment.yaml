apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: nautilus-trading
  labels:
    app: prometheus
    tier: monitoring
    component: metrics-collection
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        tier: monitoring
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=30d'
        - '--storage.tsdb.retention.size=50GB'
        - '--web.enable-lifecycle'
        - '--web.route-prefix=/'
        - '--web.enable-admin-api'
        
        ports:
        - containerPort: 9090
          name: prometheus
          protocol: TCP
          
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 8Gi
            
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        - name: storage-volume
          mountPath: /prometheus
          
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
      - name: storage-volume
        persistentVolumeClaim:
          claimName: prometheus-storage-pvc
          
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: nautilus-trading
  labels:
    app: prometheus
    component: configuration
data:
  prometheus.yml: |
    global:
      scrape_interval: 5s      # High-frequency scraping for trading
      evaluation_interval: 5s
      external_labels:
        cluster: 'nautilus-trading-cluster'
        environment: 'production'
        
    # Alerting configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
          
    # Rules for trading-specific alerts
    rule_files:
    - "trading_alerts.yml"
    
    # Scrape configuration for trading services
    scrape_configs:
    
    # Ultra-Low Latency Tier Monitoring
    - job_name: 'nautilus-risk-engine'
      static_configs:
      - targets: ['nautilus-risk-engine:9090']
      scrape_interval: 1s      # Ultra-high frequency for risk monitoring
      metrics_path: /metrics
      params:
        format: ['prometheus']
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: pod_name
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
        
    - job_name: 'nautilus-integration-engine'
      static_configs:
      - targets: ['nautilus-integration-engine:9090']
      scrape_interval: 1s
      metrics_path: /metrics
      
    - job_name: 'nautilus-position-keeper'
      static_configs:
      - targets: ['nautilus-position-keeper:9090']
      scrape_interval: 2s
      metrics_path: /metrics
      
    - job_name: 'nautilus-order-manager'
      static_configs:
      - targets: ['nautilus-order-manager:9090']
      scrape_interval: 1s      # Critical order processing monitoring
      metrics_path: /metrics
      
    # High-Performance Tier Monitoring
    - job_name: 'nautilus-market-data'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - nautilus-trading
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: nautilus-market-data
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      scrape_interval: 5s
      
    - job_name: 'nautilus-strategy-engine'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - nautilus-trading
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: nautilus-strategy-engine
      scrape_interval: 10s
      
    # Kubernetes cluster monitoring
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - nautilus-trading
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
        
  trading_alerts.yml: |
    groups:
    - name: nautilus-trading-alerts
      rules:
      
      # Ultra-Low Latency Performance Alerts
      - alert: RiskEngineLatencyHigh
        expr: nautilus_risk_check_latency_microseconds_p99 > 2750
        for: 10s
        labels:
          severity: critical
          component: risk-engine
        annotations:
          summary: "Risk engine P99 latency exceeds Phase 2B target"
          description: "Risk engine P99 latency is {{ $value }}μs, exceeding 2.75μs target"
          
      - alert: IntegrationEngineLatencyHigh
        expr: nautilus_integration_e2e_latency_microseconds_p99 > 2750
        for: 10s
        labels:
          severity: critical
          component: integration-engine
        annotations:
          summary: "End-to-end latency exceeds Phase 2B target"
          description: "Integration engine E2E P99 latency is {{ $value }}μs"
          
      - alert: MemoryPoolEfficiencyLow
        expr: nautilus_memory_pool_efficiency_percent < 95
        for: 30s
        labels:
          severity: warning
          component: memory-optimization
        annotations:
          summary: "Memory pool efficiency below Phase 2A target"
          description: "Memory pool efficiency is {{ $value }}%, below 99.1% target"
          
      # High Availability Alerts
      - alert: ServiceDown
        expr: up{job=~"nautilus-.*"} == 0
        for: 30s
        labels:
          severity: critical
        annotations:
          summary: "Nautilus service is down"
          description: "Service {{ $labels.job }} has been down for more than 30 seconds"
          
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.01
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value }} req/sec over 5min"
          
      # Resource Utilization Alerts  
      - alert: HighCPUUsage
        expr: container_cpu_usage_seconds_total > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "CPU usage is {{ $value }}% for {{ $labels.pod }}"
          
      - alert: HighMemoryUsage
        expr: container_memory_usage_bytes / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage detected"
          description: "Memory usage is {{ $value }}% for {{ $labels.pod }}"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: nautilus-trading
  labels:
    app: prometheus
    component: service-account

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
    component: cluster-role
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus
    component: cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: nautilus-trading