apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: nautilus-trading
  labels:
    app: grafana
    tier: monitoring
    component: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        tier: monitoring
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472  # Grafana user
        fsGroup: 472
        
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
          name: grafana
          protocol: TCP
          
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
            
        env:
        # Admin configuration
        - name: GF_SECURITY_ADMIN_USER
          value: "nautilus-admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretRef:
              name: grafana-credentials
              key: admin-password
              
        # Server configuration
        - name: GF_SERVER_ROOT_URL
          value: "http://localhost:3000/"
        - name: GF_SERVER_SERVE_FROM_SUB_PATH
          value: "true"
          
        # Database configuration (use SQLite for simplicity)
        - name: GF_DATABASE_TYPE
          value: "sqlite3"
        - name: GF_DATABASE_PATH
          value: "/var/lib/grafana/grafana.db"
          
        # Analytics and telemetry
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_UPDATES
          value: "false"
          
        # Performance optimization
        - name: GF_RENDERING_SERVER_URL
          value: "http://renderer:8081/render"
        - name: GF_RENDERING_CALLBACK_URL
          value: "http://grafana:3000/"
        - name: GF_LOG_FILTERS
          value: "rendering:debug"
          
        # Trading-specific plugins
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel,natel-discrete-panel,vonage-status-panel"
          
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboard-providers
          mountPath: /etc/grafana/provisioning/dashboards
          
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 30
          
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage-pvc
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboard-providers
        configMap:
          name: grafana-dashboard-providers

---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-credentials
  namespace: nautilus-trading
  labels:
    app: grafana
    component: credentials
type: Opaque
data:
  admin-password: bmF1dGlsdXMtZ3JhZmFuYS1hZG1pbg==  # nautilus-grafana-admin (base64)

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: nautilus-trading
  labels:
    app: grafana
    component: configuration
data:
  grafana.ini: |
    [server]
    protocol = http
    http_port = 3000
    domain = localhost
    enforce_domain = false
    root_url = %(protocol)s://%(domain)s:%(http_port)s/
    serve_from_sub_path = true
    
    [database]
    type = sqlite3
    path = /var/lib/grafana/grafana.db
    
    [session]
    provider = file
    provider_config = sessions
    
    [analytics]
    reporting_enabled = false
    check_for_updates = false
    
    [security]
    admin_user = nautilus-admin
    admin_password = $__env{GF_SECURITY_ADMIN_PASSWORD}
    disable_gravatar = true
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_role = Editor
    
    [auth.anonymous]
    enabled = false
    
    [log]
    mode = console
    level = info
    
    [plugins]
    allow_loading_unsigned_plugins = false
    
    [alerting]
    enabled = true
    execute_alerts = true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: nautilus-trading
  labels:
    app: grafana
    component: datasource-config
data:
  prometheus.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
      jsonData:
        timeInterval: "1s"
        queryTimeout: "60s"
        httpMethod: "GET"
    
    - name: Jaeger
      type: jaeger
      access: proxy
      url: http://jaeger-query:16686
      editable: true
      jsonData:
        tracesToLogs:
          datasourceUid: 'loki'
          tags: ['job', 'instance', 'pod', 'namespace']

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-providers
  namespace: nautilus-trading
  labels:
    app: grafana
    component: dashboard-providers
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'nautilus-trading-dashboards'
      orgId: 1
      folder: 'Nautilus Trading'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: nautilus-trading
  labels:
    app: grafana
    component: dashboards
data:
  nautilus-trading-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Nautilus Trading Platform - Phase 4 Overview",
        "tags": ["nautilus", "trading", "kubernetes", "phase4"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Ultra-Low Latency Performance (Phase 2B Targets)",
            "type": "stat",
            "targets": [
              {
                "expr": "nautilus_risk_check_latency_microseconds_p99",
                "legendFormat": "Risk Engine P99 (μs)",
                "refId": "A"
              },
              {
                "expr": "nautilus_integration_e2e_latency_microseconds_p99", 
                "legendFormat": "E2E Pipeline P99 (μs)",
                "refId": "B"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 2000},
                    {"color": "red", "value": 2750}
                  ]
                },
                "unit": "µs"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Memory Pool Efficiency (Phase 2A Achievement)",
            "type": "gauge",
            "targets": [
              {
                "expr": "nautilus_memory_pool_efficiency_percent",
                "legendFormat": "Memory Pool Efficiency (%)",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "min": 90,
                "max": 100,
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 90},
                    {"color": "yellow", "value": 95},
                    {"color": "green", "value": 99}
                  ]
                },
                "unit": "percent"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Kubernetes Pod Status (Phase 4)",
            "type": "table",
            "targets": [
              {
                "expr": "up{job=~\"nautilus-.*\"}",
                "legendFormat": "{{job}} - {{pod}}",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Auto-Scaling Metrics",
            "type": "timeseries",
            "targets": [
              {
                "expr": "kube_deployment_status_replicas{deployment=~\"nautilus-.*\"}",
                "legendFormat": "{{deployment}} - Replicas",
                "refId": "A"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 16}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "5s",
        "schemaVersion": 30,
        "version": 0
      }
    }