# NautilusTrader Engine Container - Production Optimized
# Real trading engine container with full NautilusTrader capabilities
# Sprint 2: Container-in-Container Pattern Implementation

FROM python:3.13-slim as builder

# Build-time security hardening
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    wget \
    curl \
    git \
    pkg-config \
    libssl-dev \
    libffi-dev \
    libpq-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Rust (required for NautilusTrader compilation)
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
ENV PATH="/root/.cargo/bin:${PATH}" \
    RUST_BACKTRACE=1 \
    CARGO_NET_GIT_FETCH_WITH_CLI=true

# Verify Rust installation
RUN rustc --version && cargo --version

# Production stage
FROM python:3.13-slim

# Runtime security hardening with build tools for python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libpq5 \
    libssl3 \
    ca-certificates \
    procps \
    pkg-config \
    libssl-dev \
    libffi-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Rust from builder and set default toolchain
COPY --from=builder /root/.cargo /root/.cargo
ENV PATH="/root/.cargo/bin:${PATH}" \
    RUST_BACKTRACE=1

# Set default Rust toolchain
RUN rustup default stable

# Create non-root user for security
RUN groupadd -r nautilus && useradd -r -g nautilus nautilus

# Set working directory
WORKDIR /app

# Install Python dependencies with optimized caching
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Install core dependencies with compatible versions
RUN pip install --no-cache-dir \
    numpy \
    pandas \
    pydantic \
    sqlalchemy \
    psycopg2-binary \
    redis \
    fastapi \
    uvicorn[standard]

# Install NautilusTrader with interactive brokers support
RUN pip install --no-cache-dir "nautilus_trader[ib]"

# Create required directories with proper permissions
RUN mkdir -p /app/config /app/data /app/cache /app/results /app/logs /app/strategies /app/templates \
    && chown -R nautilus:nautilus /app

# Copy engine-specific files (not entire backend)
COPY --chown=nautilus:nautilus engine_templates/ /app/templates/
COPY --chown=nautilus:nautilus engine_bootstrap.py /app/
COPY --chown=nautilus:nautilus nautilus_engine_runner.py /app/

# Set environment variables for production engine
ENV ENVIRONMENT=production \
    NAUTILUS_ENGINE=true \
    RUST_BACKTRACE=1 \
    PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=utf-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Engine-specific paths
ENV NAUTILUS_DATA_PATH=/app/data \
    NAUTILUS_CACHE_PATH=/app/cache \
    NAUTILUS_CONFIG_PATH=/app/config \
    NAUTILUS_RESULTS_PATH=/app/results \
    NAUTILUS_LOG_PATH=/app/logs \
    NAUTILUS_STRATEGIES_PATH=/app/strategies \
    NAUTILUS_TEMPLATES_PATH=/app/templates

# Security and resource limits
ENV MAX_MEMORY=2g \
    MAX_CPU=2.0 \
    ENGINE_TIMEOUT=300

# Switch to non-root user for security
USER nautilus

# Expose engine communication port
EXPOSE 8001

# Production-ready health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=5 \
    CMD python /app/engine_bootstrap.py --health-check || exit 1

# Production entrypoint with proper signal handling
ENTRYPOINT ["python", "/app/engine_bootstrap.py"]
CMD ["--mode=standby"]