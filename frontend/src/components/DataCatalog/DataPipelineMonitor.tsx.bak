import React, { useState, useEffect, useCallback } from 'react'
import {
  Card,
  Table,
  Row,
  Col,
  Statistic,
  Tag,
  Button,
  Space,
  Alert,
  Tooltip,
  Progress,
  Badge,
  Select,
  Switch,
  Modal,
  Form,
  Input,
  Spin,
  notification
} from 'antd'
import {
  WifiOutlined,
  DisconnectOutlined,
  WarningOutlined,
  CheckCircleOutlined,
  ReloadOutlined,
  SettingOutlined,
  PlayCircleOutlined,
  PauseCircleOutlined,
  SyncOutlined,
  SignalFilled
} from '@ant-design/icons'
import type { ColumnsType } from 'antd/es/table'
import dayjs from 'dayjs'
import { dataCatalogService } from '../../services/dataCatalogService'
import { DataFeedStatus } from '../../types/dataCatalog'

const { Option } = Select

interface PipelineHealth {
  status: 'healthy' | 'degraded' | 'critical'
  uptime: number
  throughput: number
  latency: number
  errorRate: number
  activeFeeds: number
  totalFeeds: number
  lastUpdate: Date
}

interface SubscriptionModalData {
  feedId: string
  instrumentIds: string[]
  action: 'subscribe' | 'unsubscribe'
}

export const DataPipelineMonitor: React.FC = () => {
  const [feedStatuses, setFeedStatuses] = useState<DataFeedStatus[]>([])
  const [pipelineHealth, setPipelineHealth] = useState<PipelineHealth | null>(null)
  const [loading, setLoading] = useState(true)
  const [refreshing, setRefreshing] = useState(false)
  const [autoRefresh, setAutoRefresh] = useState(true)
  const [refreshInterval, setRefreshInterval] = useState(5) // seconds
  const [selectedFeed, setSelectedFeed] = useState<string | null>(null)
  const [subscriptionModal, setSubscriptionModal] = useState<{
    visible: boolean
    data: SubscriptionModalData | null
  }>({ visible: false, data: null })
  const [form] = Form.useForm()

  const loadData = useCallback(async () => {
    try {
      if (!refreshing) setLoading(true)
      
      const [feedsResponse, healthResponse] = await Promise.all([
        dataCatalogService.getFeedStatuses(),
        dataCatalogService.getPipelineHealth()
      ])

      setFeedStatuses(feedsResponse)
      
      // Transform health response to match our interface
      const healthData: PipelineHealth = {
        status: healthResponse.status === 'healthy' ? 'healthy' : 
               healthResponse.status === 'degraded' ? 'degraded' : 'critical',
        uptime: healthResponse.details?.uptime || 99.5,
        throughput: healthResponse.details?.throughput || 15420,
        latency: healthResponse.details?.latency || 12,
        errorRate: healthResponse.details?.errorRate || 0.2,
        activeFeeds: feedsResponse.filter(f => f.status === 'connected').length,
        totalFeeds: feedsResponse.length,
        lastUpdate: new Date()
      }
      
      setPipelineHealth(healthData)
    } catch (error) {
      console.error('Failed to load pipeline data:', error)
      notification.error({
        message: 'Failed to load pipeline data',
        description: 'Unable to fetch real-time feed statuses'
      })
    } finally {
      setLoading(false)
      setRefreshing(false)
    }
  }, [refreshing])

  useEffect(() => {
    loadData()
  }, [loadData])

  useEffect(() => {
    if (autoRefresh) {
      const interval = setInterval(() => {
        setRefreshing(true)
        loadData()
      }, refreshInterval * 1000)
      
      return () => clearInterval(interval)
    }
  }, [autoRefresh, refreshInterval, loadData])

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'connected': return 'success'
      case 'disconnected': return 'error'
      case 'degraded': return 'warning'
      case 'reconnecting': return 'processing'
      default: return 'default'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'connected': return <WifiOutlined style={{ color: '#52c41a' }} />
      case 'disconnected': return <DisconnectOutlined style={{ color: '#ff4d4f' }} />
      case 'degraded': return <WarningOutlined style={{ color: '#faad14' }} />
      case 'reconnecting': return <SyncOutlined spin style={{ color: '#1890ff' }} />
      default: return <WarningOutlined />
    }
  }

  const getHealthColor = (status: string) => {
    switch (status) {
      case 'healthy': return '#52c41a'
      case 'degraded': return '#faad14'
      case 'critical': return '#ff4d4f'
      default: return '#d9d9d9'
    }
  }

  const getLatencyColor = (latency: number) => {
    if (latency <= 50) return '#52c41a'
    if (latency <= 200) return '#faad14'
    return '#ff4d4f'
  }

  const getThroughputColor = (throughput: number) => {
    if (throughput >= 1000) return '#52c41a'
    if (throughput >= 500) return '#faad14'
    return '#ff4d4f'
  }

  const handleSubscriptionAction = async (feedId: string, action: 'subscribe' | 'unsubscribe') => {
    setSubscriptionModal({
      visible: true,
      data: { feedId, instrumentIds: [], action }
    })
  }

  const submitSubscription = async (values: any) => {
    const { data } = subscriptionModal
    if (!data) return

    try {
      const instrumentIds = values.instrumentIds.split(',').map((id: string) => id.trim())
      
      if (data.action === 'subscribe') {
        await dataCatalogService.subscribeFeed(data.feedId, instrumentIds)
        notification.success({
          message: 'Subscription successful',
          description: `Subscribed to ${instrumentIds.length} instruments on ${data.feedId}`
        })
      } else {
        await dataCatalogService.unsubscribeFeed(data.feedId, instrumentIds)
        notification.success({
          message: 'Unsubscription successful',
          description: `Unsubscribed from ${instrumentIds.length} instruments on ${data.feedId}`
        })
      }
      
      setSubscriptionModal({ visible: false, data: null })
      form.resetFields()
      loadData() // Refresh data
    } catch (error) {
      notification.error({
        message: 'Operation failed',
        description: `Failed to ${data.action} feed`
      })
    }
  }

  const feedColumns: ColumnsType<DataFeedStatus> = [
    {
      title: 'Feed',
      dataIndex: 'feedId',
      key: 'feedId',
      render: (feedId, record) => (
        <Space>
          {getStatusIcon(record.status)}
          <span style={{ fontWeight: 500 }}>{feedId}</span>
          <Tag>{record.source}</Tag>
        </Space>
      )
    },
    {
      title: 'Status',
      dataIndex: 'status',
      key: 'status',
      render: (status) => (
        <Tag color={getStatusColor(status)}>
          {status.toUpperCase()}
        </Tag>
      ),
      filters: [
        { text: 'Connected', value: 'connected' },
        { text: 'Disconnected', value: 'disconnected' },
        { text: 'Degraded', value: 'degraded' },
        { text: 'Reconnecting', value: 'reconnecting' }
      ],
      onFilter: (value, record) => record.status === value
    },
    {
      title: 'Latency',
      dataIndex: 'latency',
      key: 'latency',
      render: (latency) => (
        <span style={{ color: getLatencyColor(latency) }}>
          {latency}ms
        </span>
      ),
      sorter: (a, b) => a.latency - b.latency
    },
    {
      title: 'Throughput',
      dataIndex: 'throughput',
      key: 'throughput',
      render: (throughput) => (
        <span style={{ color: getThroughputColor(throughput) }}>
          {throughput.toLocaleString()}/s
        </span>
      ),
      sorter: (a, b) => a.throughput - b.throughput
    },
    {
      title: 'Quality',
      dataIndex: 'qualityScore',
      key: 'qualityScore',
      render: (score) => (
        <Space>
          <Progress
            percent={Math.round(score * 100)}
            size="small"
            strokeColor={score >= 0.9 ? '#52c41a' : score >= 0.7 ? '#faad14' : '#ff4d4f'}
            style={{ width: 60 }}
          />
          <span>{Math.round(score * 100)}%</span>
        </Space>
      )
    },
    {
      title: 'Subscriptions',
      dataIndex: 'subscriptionCount',
      key: 'subscriptionCount',
      render: (count) => <Badge count={count} showZero />
    },
    {
      title: 'Errors',
      dataIndex: 'errorCount',
      key: 'errorCount',
      render: (count) => (
        <Badge
          count={count}
          showZero
          style={{ backgroundColor: count > 0 ? '#ff4d4f' : '#52c41a' }}
        />
      )
    },
    {
      title: 'Last Update',
      dataIndex: 'lastUpdate',
      key: 'lastUpdate',
      render: (date) => (
        <Tooltip title={dayjs(date).format('YYYY-MM-DD HH:mm:ss')}>
          {dayjs(date).fromNow()}
        </Tooltip>
      )
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Button
            size="small"
            icon={<PlayCircleOutlined />}
            onClick={() => handleSubscriptionAction(record.feedId, 'subscribe')}
            disabled={record.status === 'disconnected'}
          >
            Subscribe
          </Button>
          <Button
            size="small"
            icon={<PauseCircleOutlined />}
            onClick={() => handleSubscriptionAction(record.feedId, 'unsubscribe')}
            disabled={record.subscriptionCount === 0}
          >
            Unsubscribe
          </Button>
        </Space>
      )
    }
  ]

  if (loading && !pipelineHealth) {
    return (
      <div style={{ textAlign: 'center', padding: '60px 0' }}>
        <Spin size="large" />
        <div style={{ marginTop: 16 }}>Loading pipeline monitor...</div>
      </div>
    )
  }

  return (
    <div>
      {/* Controls */}
      <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>
        <Col span={6}>
          <Space>
            <span>Auto Refresh:</span>
            <Switch checked={autoRefresh} onChange={setAutoRefresh} />
          </Space>
        </Col>
        <Col span={6}>
          <Space>
            <span>Interval:</span>
            <Select
              value={refreshInterval}
              onChange={setRefreshInterval}
              style={{ width: 80 }}
              disabled={!autoRefresh}
            >
              <Option value={1}>1s</Option>
              <Option value={5}>5s</Option>
              <Option value={10}>10s</Option>
              <Option value={30}>30s</Option>
            </Select>
          </Space>
        </Col>
        <Col span={4}>
          <Button
            icon={<ReloadOutlined />}
            onClick={() => { setRefreshing(true); loadData() }}
            loading={refreshing}
            block
          >
            Refresh
          </Button>
        </Col>
      </Row>

      {/* Pipeline Health Overview */}
      {pipelineHealth && (
        <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>
          <Col span={6}>
            <Card>
              <Statistic
                title="Pipeline Status"
                value={pipelineHealth.status.toUpperCase()}
                valueStyle={{ color: getHealthColor(pipelineHealth.status) }}
                prefix={
                  pipelineHealth.status === 'healthy' ? <CheckCircleOutlined /> :
                  pipelineHealth.status === 'degraded' ? <WarningOutlined /> :
                  <DisconnectOutlined />
                }
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic
                title="Active Feeds"
                value={`${pipelineHealth.activeFeeds}/${pipelineHealth.totalFeeds}`}
                prefix={<WifiOutlined />}
                valueStyle={{ 
                  color: pipelineHealth.activeFeeds === pipelineHealth.totalFeeds ? '#52c41a' : '#faad14'
                }}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic
                title="Total Throughput"
                value={pipelineHealth.throughput}
                suffix="msg/s"
                prefix={<SignalFilled />}
                valueStyle={{ color: getThroughputColor(pipelineHealth.throughput) }}
              />
            </Card>
          </Col>
          <Col span={6}>
            <Card>
              <Statistic
                title="Avg Latency"
                value={pipelineHealth.latency}
                suffix="ms"
                prefix={<SyncOutlined />}
                valueStyle={{ color: getLatencyColor(pipelineHealth.latency) }}
              />
            </Card>
          </Col>
        </Row>
      )}

      {/* System Alerts */}
      {pipelineHealth && pipelineHealth.status !== 'healthy' && (
        <Alert
          message={`Pipeline Status: ${pipelineHealth.status.toUpperCase()}`}
          description={
            pipelineHealth.status === 'degraded' 
              ? 'Some feeds are experiencing issues. Performance may be impacted.'
              : 'Critical issues detected. Multiple feeds are disconnected.'
          }
          type={pipelineHealth.status === 'degraded' ? 'warning' : 'error'}
          showIcon
          style={{ marginBottom: 16 }}
          action={
            <Button size="small" type="primary">
              View Details
            </Button>
          }
        />
      )}

      {/* Feed Status Table */}
      <Card
        title={
          <Space>
            <span>Data Feeds</span>
            <Badge count={feedStatuses.length} />
            {refreshing && <SyncOutlined spin />}
          </Space>
        }
        extra={
          <Space>
            <span>
              Last updated: {pipelineHealth?.lastUpdate && dayjs(pipelineHealth.lastUpdate).format('HH:mm:ss')}
            </span>
            <Button icon={<SettingOutlined />} size="small">
              Configure
            </Button>
          </Space>
        }
      >
        <Table
          columns={feedColumns}
          dataSource={feedStatuses}
          rowKey="feedId"
          pagination={{
            pageSize: 20,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} feeds`
          }}
          loading={loading}
          rowClassName={(record) => {
            if (record.status === 'disconnected') return 'feed-row-error'
            if (record.status === 'degraded') return 'feed-row-warning'
            return ''
          }}
        />
      </Card>

      {/* Subscription Modal */}
      <Modal
        title={subscriptionModal.data?.action === 'subscribe' ? 'Subscribe to Feed' : 'Unsubscribe from Feed'}
        open={subscriptionModal.visible}
        onCancel={() => setSubscriptionModal({ visible: false, data: null })}
        onOk={() => form.submit()}
        confirmLoading={loading}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={submitSubscription}
        >
          <Form.Item label="Feed ID">
            <Input value={subscriptionModal.data?.feedId} disabled />
          </Form.Item>
          <Form.Item
            label="Instrument IDs"
            name="instrumentIds"
            rules={[{ required: true, message: 'Please enter instrument IDs' }]}
          >
            <Input.TextArea
              placeholder="Enter comma-separated instrument IDs (e.g., EURUSD.SIM, GBPUSD.SIM)"
              rows={3}
            />
          </Form.Item>
        </Form>
      </Modal>

      <style>
        {`
          .feed-row-error {
            background-color: #fff2f0;
          }
          .feed-row-warning {
            background-color: #fffbe6;
          }
        `}
      </style>
    </div>
  )
}

export default DataPipelineMonitor