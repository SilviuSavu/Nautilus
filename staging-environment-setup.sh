#!/bin/bash

# Nautilus Trading Platform - Staging Environment Setup Script
# For User Acceptance Testing (UAT)

set -e

echo "üöÄ Setting up Nautilus Trading Platform Staging Environment for UAT"
echo "================================================================="

# Check prerequisites
echo "üìã Checking prerequisites..."
command -v docker >/dev/null 2>&1 || { echo "‚ùå Docker is required but not installed." >&2; exit 1; }
command -v docker-compose >/dev/null 2>&1 || { echo "‚ùå Docker Compose is required but not installed." >&2; exit 1; }

# Stop any running development containers
echo "üõë Stopping development containers..."
docker-compose down 2>/dev/null || true

# Create staging environment file
echo "‚öôÔ∏è  Creating staging environment configuration..."
cat > .env.staging << EOF
# Staging Environment Configuration
ENVIRONMENT=staging
NODE_ENV=staging

# Database
POSTGRES_DB=nautilus_staging
POSTGRES_USER=nautilus_staging
POSTGRES_PASSWORD=staging_password_123!

# IB Gateway (Demo/Paper Trading)
IB_USERID=demo
IB_PASSWORD=demo
IB_CLIENT_ID=2

# API Keys (leave empty for demo mode)
BINANCE_API_KEY=
BINANCE_API_SECRET=
COINBASE_API_KEY=
COINBASE_API_SECRET=
COINBASE_PASSPHRASE=
BYBIT_API_KEY=
BYBIT_API_SECRET=
KRAKEN_API_KEY=
KRAKEN_API_SECRET=
OKX_API_KEY=
OKX_API_SECRET=
OKX_PASSPHRASE=
EOF

# Build staging images
echo "üî® Building staging Docker images..."
docker-compose -f docker-compose.staging.yml build

# Create staging volumes
echo "üíæ Creating staging volumes..."
docker volume create nautilus_postgres_staging_data
docker volume create nautilus_redis_staging_data
docker volume create nautilus_ib_staging_data
docker volume create nautilus_prometheus_staging_data
docker volume create nautilus_grafana_staging_data

# Start staging environment
echo "üåü Starting staging environment..."
docker-compose -f docker-compose.staging.yml up -d

# Wait for services to be ready
echo "‚è≥ Waiting for services to be ready..."
sleep 30

# Health checks
echo "üè• Performing health checks..."

# Check backend health
echo "  ‚Ä¢ Backend health check..."
for i in {1..10}; do
    if curl -s http://localhost:8001/health > /dev/null; then
        echo "    ‚úÖ Backend is healthy"
        break
    fi
    if [ $i -eq 10 ]; then
        echo "    ‚ùå Backend health check failed"
        exit 1
    fi
    sleep 5
done

# Check frontend
echo "  ‚Ä¢ Frontend health check..."
if curl -s http://localhost:3001/health > /dev/null; then
    echo "    ‚úÖ Frontend is healthy"
else
    echo "    ‚ùå Frontend health check failed"
fi

# Check database
echo "  ‚Ä¢ Database health check..."
if docker exec nautilus-postgres-staging pg_isready -U nautilus_staging > /dev/null; then
    echo "    ‚úÖ Database is healthy"
else
    echo "    ‚ùå Database health check failed"
fi

# Check Redis
echo "  ‚Ä¢ Redis health check..."
if docker exec nautilus-redis-staging redis-cli ping | grep -q PONG; then
    echo "    ‚úÖ Redis is healthy"
else
    echo "    ‚ùå Redis health check failed"
fi

echo ""
echo "üéâ Staging Environment Setup Complete!"
echo "======================================"
echo ""
echo "üìä Access Points:"
echo "  ‚Ä¢ Frontend (UAT):      http://localhost:3001"
echo "  ‚Ä¢ Backend API:         http://localhost:8001"
echo "  ‚Ä¢ Backend Health:      http://localhost:8001/health"
echo "  ‚Ä¢ Backend Docs:        http://localhost:8001/docs"
echo "  ‚Ä¢ Grafana Monitoring:  http://localhost:3002 (admin/staging_admin_123!)"
echo "  ‚Ä¢ Prometheus Metrics:  http://localhost:9091"
echo "  ‚Ä¢ IB Gateway VNC:      vnc://localhost:5901"
echo ""
echo "üíæ Database Access:"
echo "  ‚Ä¢ Host: localhost"
echo "  ‚Ä¢ Port: 5433"
echo "  ‚Ä¢ Database: nautilus_staging"
echo "  ‚Ä¢ User: nautilus_staging"
echo "  ‚Ä¢ Password: staging_password_123!"
echo ""
echo "üîß Staging Management:"
echo "  ‚Ä¢ Start:    docker-compose -f docker-compose.staging.yml up -d"
echo "  ‚Ä¢ Stop:     docker-compose -f docker-compose.staging.yml down"
echo "  ‚Ä¢ Logs:     docker-compose -f docker-compose.staging.yml logs -f"
echo "  ‚Ä¢ Status:   docker-compose -f docker-compose.staging.yml ps"
echo ""
echo "üß™ UAT Testing Ready!"
echo "  ‚Ä¢ All 21 production-ready stories can now be tested"
echo "  ‚Ä¢ Environment mirrors production configuration"
echo "  ‚Ä¢ Monitoring and logging enabled for validation"
echo "  ‚Ä¢ Paper trading mode enabled for safe testing"
echo ""